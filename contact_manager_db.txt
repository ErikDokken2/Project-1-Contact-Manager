# MySQL contact_manager Database


# General Procedures #

# err
# for reporting Exceptions
CREATE DEFINER=`root`@`localhost` PROCEDURE `err`(msg VARCHAR(100))
BEGIN
	SELECT msg AS 'ERROR';
END


# User Procedures #

# show_users
CREATE DEFINER=`root`@`localhost` PROCEDURE `show_users`()
BEGIN
	# show all users
	SELECT 
		user_id AS 'Username', 
		key_password AS "Password", 
		concat(first_name," ", last_name) AS 'Name', 
		date_record AS 'Last Date Updated', 
		last_login AS "Last Login",
		logged_in AS "Logged In"
    FROM user_register;
END


# log_on
CREATE DEFINER=`root`@`localhost` PROCEDURE `log_on`(u_id VARCHAR(40), pass VARCHAR(40))
BEGIN
	IF(valid_pair(u_id, pass) > 0) THEN								# if Username-Password pair is valid, then
		UPDATE user_register										
		SET
			logged_in = 1,											# set the logged_in boolean to true
			last_login = curdate()									# update the last login date
		WHERE user_id LIKE u_id;									# specific to this user
        
	ELSE
		CALL err('Invalid Username Password Pair');
        
	END IF;
END


# log_off
CREATE DEFINER=`root`@`localhost` PROCEDURE `log_off`(u_id VARCHAR(40), pass VARCHAR(40))
BEGIN
	IF(valid_pair(u_id, pass) > 0) THEN									# if valid Username-Password pair
		UPDATE user_register											
		SET
			logged_in = 0,												# set logged_in boolean to false
			last_login = curdate()										# update last time logged in
		WHERE user_id LIKE u_id;										# for this user
        
	ELSE
		CALL err('Invalid Username Password Pair');
        
	END IF;
END


# get_page
# retrieves a page (100 contacts) from the user's contact list, pages are numbered 0,1,2...
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_page`(u_id VARCHAR(40), pg INT)
BEGIN
	CALL main_convert(u_id);										# set user's contact list as active list
    
    IF(count_pages() > pg AND 0 <= pg) THEN								# if page exists
		SET pg = pg * 100;										# convert page to a contact number
		
		SELECT 												# retrieve contacts
			contact_id AS'Contact ID', 
			first_name AS 'First Name', 
			last_name AS 'Last Name',
			phone AS 'Phone Number', 
			email AS 'Email', 
			street AS 'Street',
			city AS 'City',
			state AS 'State',
			zip AS 'ZIP Code',
			birthday AS 'Birthday', 
			date_record AS 'Date Record'
		FROM main 
		where user_id LIKE u_id LIMIT pg, 100;							# from requested page
        
	ELSE
		CALL err('Out of Page Bounds');
        
    END IF;
    
    CALL main_revert(u_id);											# revoke user's contact list as the active list
END


# get_search
# works similarly to get_page but with a refining search term
CREATE DEFINER=`root`@`localhost` PROCEDURE `get_search`(u_id VARCHAR(40), searchterm VARCHAR(85), pg INT)
BEGIN
	DECLARE skey VARCHAR(90);											# mysql's search term
    
    CALL main_convert(u_id); 											# set user's contact list as active list
    
    IF(count_pages() > pg AND 0 <= pg) THEN								# if page exists
		SET pg = pg * 100;												# each page holds 100 contacts, update to contact number
		SET skey = CONCAT('%',TRIM(LOWER(searchterm)),'%');				# turn the search term into a mysql search term

		SELECT 															# returns the contacts
			contact_id AS'Contact ID', 
			first_name AS 'First Name', 
			last_name AS 'Last Name',
			phone AS 'Phone Number', 
			email AS 'Email', 
			street AS 'Street',
			city AS 'City',
			state AS 'State',
			zip AS 'ZIP Code',
			birthday AS 'Birthday', 
			date_record AS 'Date Record'
		FROM main 
		WHERE 
			(LOWER(first_name) LIKE skey) AND 							# according to the search term
			(LOWER(last_name) LIKE skey) AND 
			(LOWER(email) LIKE skey) AND 
			(LOWER(street) LIKE skey) AND 
			(LOWER(city) LIKE skey) AND 
			(LOWER(state) LIKE skey)
		LIMIT pg, 100;													# from the requested page
        
    ELSE 
		CALL err('Out Of Page Bounds');
	
    END IF;
    
    CALL main_revert(u_id);												# revoke user's contact list as the active list
END


# create_user
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_user`(u_id VARCHAR(40), key_p VARCHAR(40), 
fname VARCHAR(20), lname VARCHAR(20))
BEGIN
	IF (user_exists(u_id) = 0) THEN										# if username not in use, then
		# create user
		INSERT INTO user_register(user_id, key_password, first_name, last_name, date_record, logged_in)	
		VALUES(u_id, key_p, fname, lname, curdate(), 0);
        
        # sanity check - display created user
		SELECT 
			user_id AS 'Username', 
            key_password AS "Password", 
			concat(first_name," ", last_name) AS 'Name', 
			date_record AS 'Last Date Updated', 
            last_login AS "Last Login",
			logged_in AS "Logged In"
		FROM user_register 
		WHERE user_id LIKE u_id;
        
        #create user's contact list (named: username_list)
		SET 
        @table_maker = 
			concat(
				'CREATE TABLE ', u_id, "_list (
				contact_id INT AUTO_INCREMENT PRIMARY KEY,
				first_name VARCHAR(20),
				last_name VARCHAR(20),
				phone DECIMAL(10,0),
				email VARCHAR(80),
                birthday DATE,
				street VARCHAR(40),
				city VARCHAR(85),
				state VARCHAR(30),
				zip DECIMAL(5,0),
                date_record DATE
                );" 
            );
		PREPARE create_table FROM @table_maker;
		EXECUTE create_table;
		DEALLOCATE PREPARE create_table;
        
        #call log_on(u_id, key_p);
        #call create_contact(u_id, fname, lname, 0, NULL, NULL, NULL, NULL, NULL, 0);
        #call log_off(u_id);
    
	ELSE
		CALL err('Username In Use');
        
	END IF;
END


# update_user
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_user`(cur_id VARCHAR(40), new_id VARCHAR(40),
 cur_pass VARCHAR(40), new_pass VARCHAR(40),
fname VARCHAR(20), lname VARCHAR(20))
BEGIN
	IF (logged_in(cur_id) = 0) THEN 										# if not logged in, then
		CALL err('User not Logged In');										# report error
    
	ELSEIF (valid_pair(cur_id, cur_pass) = 0) THEN 							# if invalid Username-Password pair, then
		CALL err('Invalid Username Password Pair');							# report error

	ELSEIF (user_exists(new_id) > 0 AND (cur_id NOT LIKE new_id)) THEN 		# if the new username is in use
		CALL err('Username already in use.');								# report error

	ELSE 																	# otherwise, good to go
		SET SQL_SAFE_UPDATES = 0;											# turn on updates (not exactly true)
        
			UPDATE user_register											# update all values
			SET 
				user_id = new_id,
				first_name = fname,
				last_name = lname,
				key_password = new_pass,
                date_record = curdate()
			WHERE (user_id LIKE cur_id);									# for this user
            
		SET SQL_SAFE_UPDATES = 1;											# turn off updates
    
		# rename user's contact list
		SET @table_namer = concat("RENAME TABLE ", cur_id, "_list TO ", new_id, "_list;");
		PREPARE rename_table FROM @table_namer;
		EXECUTE rename_table;
		DEALLOCATE PREPARE rename_table;
        
        #call update_contact(u_id, fname, lname, 0, NULL, NULL, NULL, NULL, NULL, 0);

		# sanity check - user information
		SELECT 
			user_id AS 'Username', 
            key_password AS "Password", 
			concat(first_name," ", last_name) AS 'Name', 
			date_record AS 'Last Date Updated', 
            last_login AS "Last Login",
			logged_in AS "Logged In"
		FROM user_register 
		WHERE user_id LIKE new_id;

	END IF;
END


# delete_user
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_user`(u_id VARCHAR(40), pass VARCHAR(40))
BEGIN
	IF (logged_in(u_id) = 0) THEN
		CALL err('User not Logged In');
    
	ELSEIF (valid_pair(u_id, pass) > 0) THEN								# if valid Username-Password Pair
		SELECT 												# sanity check - display deleted user's username
			user_id AS 'Deleted'
		FROM user_register 
        WHERE user_id LIKE u_id;
        
		DELETE 												# delete user
        FROM user_register 
        WHERE user_id LIKE u_id;
    
		# delete user's contact list
		SET @table_breaker = concat("DROP TABLE IF EXISTS ", u_id, "_list;");
		PREPARE delete_table FROM @table_breaker;
		EXECUTE delete_table;
		DEALLOCATE PREPARE delete_table;
    
	ELSEIF (user_exists(u_id) > 0) THEN 								# if Username exists, password must be incorrect
		CALL err('Incorrect Password');
    
	ELSE														# Username does not exist
		CALL err('Invalid Username');
        
	END IF;
END


# User Functions #

# logged_in
CREATE DEFINER=`root`@`localhost` FUNCTION `logged_in`(u_id VARCHAR(40)) RETURNS int
    READS SQL DATA
BEGIN
	DECLARE boole INT DEFAULT 0;

	IF(user_exists(u_id) = 0) THEN
		RETURN -1;
        
	ELSE
		SELECT 
			logged_in INTO boole 
		FROM user_register 
        WHERE user_id LIKE u_id;
        
		RETURN boole;
        
END IF;
END


# user_exists
CREATE DEFINER=`root`@`localhost` FUNCTION `user_exists`(u_id VARCHAR(40)) RETURNS int
    READS SQL DATA
BEGIN
	DECLARE boole INT DEFAULT 0;
    
	SELECT 
		count(*) INTO boole 
	FROM user_register 
	WHERE user_id LIKE u_id;
    
	RETURN boole;
END


# valid_pair
CREATE DEFINER=`root`@`localhost` FUNCTION `valid_pair`(u_id VARCHAR(40), pass VARCHAR(40)) RETURNS int
    READS SQL DATA
BEGIN
	DECLARE boole INT DEFAULT 0;
    
	IF(user_exists(u_id) = 0) THEN
		RETURN -1;
        
	ELSE
		SELECT 
			count(*) INTO boole 
        FROM user_register 
        WHERE (user_id LIKE u_id) AND (key_password LIKE pass);
        
		RETURN boole;
        
	END IF;
END


# count_contacts
CREATE DEFINER=`root`@`localhost` FUNCTION `count_contacts`() RETURNS int
    READS SQL DATA
BEGIN
	DECLARE num INT DEFAULT 0;
		SELECT count(*) INTO num FROM main;
    RETURN num;
END


# count_pages
CREATE DEFINER=`root`@`localhost` FUNCTION `count_pages`() RETURNS int
    READS SQL DATA
BEGIN
	DECLARE num INT DEFAULT 0;
    SET num = count_contacts();
    
    IF(num = 0) THEN
		RETURN 0;
        
	ELSE
		SET num = num-1;
        SET num = num/100;
        SET num = num + 1;
        RETURN num;
	
    END IF;
END



# Contact Procedures #

# show_contacts
CREATE DEFINER=`root`@`localhost` PROCEDURE `show_contacts`(u_id VARCHAR(40))
BEGIN
	CALL main_convert(u_id); 					# set user's contact list as active list
    
    # display user's contact list
	SELECT 
		contact_id AS 'Contact ID', 
		first_name AS 'First Name', 
		last_name AS 'Last Name',
		phone AS 'Phone Number', 
		email AS 'Email', 
		street AS 'Street',
		city AS 'City',
		state AS 'State',
		zip AS 'ZIP Code',
		birthday AS 'Birthday', 
		date_record AS 'Date Record'
	FROM main;
    
    CALL main_revert(u_id);						# revoke user's contact list as the active list
END


# main_convert
CREATE DEFINER=`root`@`localhost` PROCEDURE `main_convert`(u_id VARCHAR(40))
BEGIN
	IF (main_exists() > 0) THEN								# checks if another list is active, as it would be lost if we continued
		call err('Previous Contact List Still In Use');
        
	ELSEIF(user_exists(u_id) = 0) THEN
		CALL err('Invalid Username');
        
	ELSEIF(logged_in(u_id) = 0) THEN
		CALL err('User Not Logged In');
        
	ELSE												# renames user's contact list to main (the active list)
		SET @main_converter = concat("RENAME TABLE ", u_id, "_list TO main;");
		PREPARE main_convert FROM @main_converter;
		EXECUTE main_convert;
		DEALLOCATE PREPARE main_convert;
        
	END IF;
END


# main_revert
CREATE DEFINER=`root`@`localhost` PROCEDURE `main_revert`(u_id VARCHAR(40))
BEGIN
	IF (main_exists() = 0) THEN										# checks for logical fallacy: nothing to revert
        CALL err('No Contact List In Use');
        
	ELSEIF(user_exists(u_id) = 0) THEN
		CALL err('Invalid Username');
        
	ELSEIF(logged_in(u_id) = 0) THEN
		CALL err('User Not Logged In');
        
	ELSE															
		# renames active list (main) to the user's contact list
		SET @main_reverter = concat("RENAME TABLE main TO ", u_id, "_list;");
		PREPARE main_revert FROM @main_reverter;
		EXECUTE main_revert;
		DEALLOCATE PREPARE main_revert;
        
	END IF;
END


# create_contact
CREATE DEFINER=`root`@`localhost` PROCEDURE `create_contact`(u_id VARCHAR(40), fname VARCHAR(20), lname VARCHAR(20), 
num DECIMAL(10,0), mail VARCHAR(80), bday DATE, 
lane VARCHAR(40), town VARCHAR(85), region VARCHAR(30), area DECIMAL(5,0))
BEGIN
	CALL main_convert(u_id);												# set user's contact list as the active list

	# create new contact
	INSERT INTO main(first_name, last_name, phone, email, birthday, street, city, state, zip, date_record)
	VALUES(fname, lname, num, mail, bday, lane, town, region, area, curdate());
    
    # sanity check - display the created contact
    SELECT 
		contact_id AS'Contact ID', 
		first_name AS 'First Name', 
		last_name AS 'Last Name',
		phone AS 'Phone Number', 
		email AS 'Email', 
		street AS 'Street',
		city AS 'City',
		state AS 'State',
		zip AS 'ZIP Code',
		birthday AS 'Birthday', 
		date_record AS 'Date Record'
	FROM main 
	WHERE 
		(first_name LIKE fname) AND 
        (last_name LIKE lname) AND 
        (phone LIKE num) AND 
        (email LIKE mail) AND 
        (street LIKE lane) AND 
        (city LIKE town) AND 
        (state LIKE region) AND 
        (zip LIKE area) AND 
        (birthday LIKE bday)
	LIMIT 1;
    
    CALL main_revert(u_id);													# revoke user's contact list as the active list
END


# update_contact
CREATE DEFINER=`root`@`localhost` PROCEDURE `update_contact`(u_id VARCHAR(40), c_id INT, fname VARCHAR(20), lname VARCHAR(20), 
num DECIMAL(10,0), mail VARCHAR(80), bday DATE, 
lane VARCHAR(40), town VARCHAR(85), region VARCHAR(30), area DECIMAL(5,0))
BEGIN
	CALL main_convert(u_id); 										# make the user's contact list the active list
    
    IF(contact_exists(c_id) = 0) THEN
		CALL err('Contact Does Not Exist');
        
	ELSE
		SET SQL_SAFE_UPDATES = 0;
		UPDATE main 												# update this contact
			SET 
			first_name = fname,
			last_name = lname,
			phone = num,
			email = mail,
			birthday = bday,
			street = lane,
			city = town,
			state = region,
			zip = area,
			date_record = curdate()
		WHERE contact_id = c_id;
		SET SQL_SAFE_UPDATES = 1;
		
		SELECT 													# sanity check - display this contact
			contact_id AS 'Contact ID', 
			first_name AS 'First Name', 
			last_name AS 'Last Name',
			phone AS 'Phone Number', 
			email AS 'Email', 
			street AS 'Street',
			city AS 'City',
			state AS 'State',
			zip AS 'ZIP Code',
			birthday AS 'Birthday', 
			date_record AS 'Date Record'
		FROM main 
		WHERE contact_id = c_id;
    
    END IF;
    
    CALL main_revert(u_id); # revoke the user's contact list as the active list
END


# delete_contact
CREATE DEFINER=`root`@`localhost` PROCEDURE `delete_contact`(u_id VARCHAR(40), c_id INT)
BEGIN
	CALL main_convert(u_id);											# set user's contact list as active list
    
    IF(contact_exists(c_id) = 0) THEN
		call err('Contact Does Not Exist');
        
	ELSE
		SELECT 															# sanity check - display contact to be deleted
			contact_id AS'Contact ID', 
			first_name AS 'First Name', 
			last_name AS 'Last Name',
			phone AS 'Phone Number', 
			email AS 'Email', 
			street AS 'Street',
			city AS 'City',
			state AS 'State',
			zip AS 'ZIP Code',
			birthday AS 'Birthday', 
			date_record AS 'Date Record'
		FROM main 
		WHERE contact_id = c_id;
		
		DELETE FROM main WHERE contact_id = c_id;						# delete given contact identified by contact_id
	END IF;
    
	CALL main_revert(u_id);												# revoke user's contact list as active list
END



# Contact Functions

# contact_exists
CREATE DEFINER=`root`@`localhost` FUNCTION `contact_exists`(c_id INT) RETURNS int
    READS SQL DATA
BEGIN
	DECLARE boole INT DEFAULT 0;
    
	SELECT 
		count(*) INTO boole 
	FROM main 
	WHERE contact_id LIKE c_id;
    
	RETURN boole;
END


# main_exists
CREATE DEFINER=`root`@`localhost` FUNCTION `main_exists`() RETURNS int
    READS SQL DATA
BEGIN
	DECLARE boole INT DEFAULT 0;
    
    select 
		count(*) INTO boole 
	FROM information_schema.Tables 
	WHERE TABLE_NAME LIKE 'main' AND TABLE_SCHEMA LIKE 'contact_manager';
    
    RETURN boole;
END
